# -*- coding: utf-8 -*-
"""The difference between classification algorithms.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12MU38gIOvx_Bt-aL9zx7tuDW0JRUqO5v
"""

import pandas as pd
df = pd.read_csv('/content/StudentsPerformance.csv')
df.head()

df.info()

df.describe()

print (df.columns)

df['gender'] = df['gender'].map({'male':0 , 'female':1})
df['race/ethnicity'] = df['race/ethnicity'].astype('category').cat.codes
df['parental level of education'] = df['parental level of education'].astype('category').cat.codes
df['test preparation course'] = df['test preparation course'].map({'none':0 ,'completed':1})
df['lunch']=df['lunch'].map({'standard':1 ,'free/reduced':0})

df['average_score']=(df['math score']+df['reading score']+df['writing score'])/3
df['passed']=df['average_score'].apply(lambda x:1 if x>=65 else 0)

df = df.drop(['average_score'], axis=1)

df.head()

from sklearn.model_selection import train_test_split
x = df.drop('passed', axis = 1 )
y = df['passed']
x_train , x_test , y_train , y_test = train_test_split(x,y ,test_size=0.2 , random_state=42)
print ("training data shape ", x_train.shape)
print ("testing data shape ", x_test.shape)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train , y_train)

y_pred = model.predict(x_test)

from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
print ('Accuracy : ' , accuracy_score(y_test , y_pred))
print ('confusion_matrix : \n' , confusion_matrix(y_test , y_pred))
print ('classification_report : \n' , classification_report(y_test , y_pred))

from sklearn.tree import DecisionTreeClassifier
tree_model = DecisionTreeClassifier(random_state = 42)
tree_model.fit(x_train , y_train)

y_tree_pred = tree_model.predict(x_test)

from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
print ('Accuracy : ' , accuracy_score(y_test , y_pred))
print ('confusion_matrix : \n' , confusion_matrix(y_test , y_pred))
print ('classification_report : \n' , classification_report(y_test , y_pred))

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(n_estimators=100 , random_state=42)
rf_model.fit(x_train , y_train)

y_rfpred = rf_model.predict(x_test)

from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
print ('Accuracy : ' , accuracy_score(y_test , y_pred))
print ('confusion_matrix : \n' , confusion_matrix(y_test , y_pred))
print ('classification_report : \n' , classification_report(y_test , y_pred))

from sklearn.neighbors import KNeighborsClassifier
knn_model = KNeighborsClassifier(n_neighbors=5)
knn_model.fit(x_train , y_train)

y_knnpred= knn_model.predict(x_test)

from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
print ('Accuracy : ' , accuracy_score(y_test , y_pred))
print ('confusion_matrix : \n' , confusion_matrix(y_test , y_pred))
print ('classification_report : \n' , classification_report(y_test , y_pred))

from sklearn.svm import SVC
svm_model = SVC(kernel='linear')

svm_model.fit(x_train, y_train)

y_svm_pred = svm_model.predict(x_test)

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
print("Accuracy:", accuracy_score(y_test, y_svm_pred))
print("\nClassification Report:\n", classification_report(y_test, y_svm_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_svm_pred))

!pip install seaborn

import seaborn as sns
import matplotlib.pyplot as plt

cm_knn = confusion_matrix(y_test, y_knnpred)
plt.figure(figsize=(4, 3))
sns.heatmap(cm_knn, annot=True, fmt='d', cmap='Greens', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.title("Confusion Matrix - KNN")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(4, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.title("Confusion Matrix - Logistic Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_rfpred)

plt.figure(figsize=(4, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.title("Confusion Matrix - Logistic Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_tree_pred)

plt.figure(figsize=(4, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.title("Confusion Matrix - Logistic Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_svm_pred)

plt.figure(figsize=(4, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Fail', 'Pass'], yticklabels=['Fail', 'Pass'])
plt.title("Confusion Matrix - Logistic Regression")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()